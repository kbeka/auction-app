{"ast":null,"code":"var _jsxFileName = \"/home/cleo/solidity/auction-app/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      bid: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      highestbid: 0,\n      highestbidder: \"\",\n      can_withdraw: null,\n      balance: null,\n      input: \"\"\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = AuctionContract.networks[networkId];\n        const instance = new web3.eth.Contract(AuctionContract.abi, deployedNetwork && deployedNetwork.address);\n        const high_bid = await instance.methods.highestBid().call();\n        const high_bidder = await instance.methods.highestBidder().call(); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          highestbid: high_bid,\n          highestbidder: high_bidder\n        });\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runBid = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.bid().send({\n        from: accounts[0],\n        value: this.state.bid\n      }); // Get the value from the contract to prove it worked.\n\n      const response_bid = await contract.methods.highestBid().call();\n      const response_bidder = await contract.methods.highestBidder().call; // Update state with the result.\n\n      this.setState({\n        highestbid: response_bid,\n        highestbidder: response_bidder\n      });\n    };\n\n    this.runWithdraw = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            contract = _this$state2.contract;\n      await contract.methods.withdraw().send({\n        from: accounts[0]\n      });\n      const response_bid = await contract.methods.highestBid().call();\n      const response_bidder = await contract.methods.highestBidder().call;\n      this.setState({\n        highestbid: response_bid,\n        highestbidder: response_bidder\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Auction\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"The highestBid is: \", this.state.highestBid, \" Wei\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"The highestBidder is: \", this.state.highestBidder), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Your bid is: \", this.state.accountBid, \" Wei\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Enter your bid (Ether):\"), React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.myChangeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.bid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Bid\"), React.createElement(\"button\", {\n      onClick: this.withdraw,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Withdraw\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/cleo/solidity/auction-app/client/src/App.js"],"names":["React","Component","AuctionContract","getWeb3","App","state","bid","web3","accounts","contract","highestbid","highestbidder","can_withdraw","balance","input","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","high_bid","methods","highestBid","call","high_bidder","highestBidder","setState","error","alert","console","runBid","send","from","value","response_bid","response_bidder","runWithdraw","withdraw","render","accountBid","myChangeHandler"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { \n  \tbid: 0, \n  \tweb3: null, \n  \taccounts: null, \n  \tcontract: null,\n  \thighestbid: 0,\n  \thighestbidder: \"\",\n  \tcan_withdraw: null,\n  \tbalance: null,\n  \tinput: \"\" \n  \t};\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = AuctionContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        AuctionContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n      const high_bid = await instance.methods.highestBid().call();\n      const high_bidder = await instance.methods.highestBidder().call();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({highestbid: high_bid, highestbidder: high_bidder})\n      this.setState({ web3, accounts, contract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runBid = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.bid().send({ from: accounts[0], value: this.state.bid });\n\n    // Get the value from the contract to prove it worked.\n    const response_bid = await contract.methods.highestBid().call();\n    const response_bidder = await contract.methods.highestBidder().call;\n\n    // Update state with the result.\n    this.setState({ highestbid: response_bid, highestbidder: response_bidder });\n  };\n  \n  runWithdraw = async () => {\n  \tconst { accounts, contract } = this.state;\n  \t\n  \tawait contract.methods.withdraw().send({ from: accounts[0] });\n  \t\n  \tconst response_bid = await contract.methods.highestBid().call();\n    const response_bidder = await contract.methods.highestBidder().call;\n    \n    this.setState({ highestbid: response_bid, highestbidder: response_bidder });\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Auction</h1>\n        <div>The highestBid is: {this.state.highestBid} Wei</div>\n        <div>The highestBidder is: {this.state.highestBidder}</div>\n        <div>Your bid is: {this.state.accountBid} Wei</div>\n        \n        <div>Enter your bid (Ether):</div>\n\t<input type='text' onChange={this.myChangeHandler}/>\n\t<button onClick={this.bid}>Bid</button>\n\t<button onClick={this.withdraw}>Withdraw</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}