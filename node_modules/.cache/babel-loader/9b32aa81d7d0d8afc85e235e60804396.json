{"ast":null,"code":"var _jsxFileName = \"/home/cleo/solidity/auction-app/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      bid: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      highestbid: 0,\n      highestbidder: \"\",\n      can_withdraw: null,\n      balance: null,\n      input: \"\"\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = AuctionContract.networks[networkId];\n        const instance = new web3.eth.Contract(AuctionContract.abi, deployedNetwork && deployedNetwork.address);\n        const high_bid = await instance.methods.highestBid().call();\n        const high_bidder = await instance.methods.highestBidder().call();\n        const bal = await instance.methods.userBalances(accounts[0]).call(); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          highestbid: high_bid,\n          highestbidder: high_bidder,\n          balance: bal\n        });\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runBid = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract,\n            web3 = _this$state.web3;\n      const val = await web3.utils.toWei(this.state.input, 'ether');\n      await contract.methods.bid().send({\n        from: accounts[0],\n        value: val\n      }); //const response_bid = await contract.methods.highestBid().call();\n      //const response_bidder = await contract.methods.highestBidder().call;\n      // Update state with the result.\n\n      this.setState({\n        highestbid: val,\n        highestbidder: accounts[0],\n        balance: val\n      });\n    };\n\n    this.runWithdraw = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            contract = _this$state2.contract;\n      await contract.methods.withdraw().send({\n        from: accounts[0]\n      }); //const response_bid = await contract.methods.highestBid().call();\n      //const response_bidder = await contract.methods.highestBidder().call;\n\n      this.setState({\n        balance: 0\n      }); //this.setState({ highestbid: response_bid, highestbidder: response_bidder });\n    };\n\n    this.getValue = event => {\n      this.setState({\n        input: event.target.value\n      }, () => {\n        console.log(this.state.input);\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"u\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Auction\")), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Lets begin the Auction!\"), React.createElement(\"label\", {\n      for: \"bid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Enter bid: \"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"bid name=\",\n      bid: true,\n      onChange: this.getV,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), \"\\xA0\\xA0\", React.createElement(\"button\", {\n      onClick: this.runBid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Bid\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \" Your bid is: \", this.state.balance, \" wei \"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \" The highest bid is: \", this.state.highestbid, \" wei \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \" The highest bidder is: \", this.state.highestbidder, \" \")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"The one with the lowest bid can withdraw: \\xA0\", React.createElement(\"button\", {\n      onClick: this.runwithdraw,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Withdraw\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/cleo/solidity/auction-app/client/src/App.js"],"names":["React","Component","AuctionContract","getWeb3","App","state","bid","web3","accounts","contract","highestbid","highestbidder","can_withdraw","balance","input","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","high_bid","methods","highestBid","call","high_bidder","highestBidder","bal","userBalances","setState","error","alert","console","runBid","val","utils","toWei","send","from","value","runWithdraw","withdraw","getValue","event","target","log","render","getV","runwithdraw"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BI,KAD0B,GAClB;AACPC,MAAAA,GAAG,EAAE,CADE;AAEPC,MAAAA,IAAI,EAAE,IAFC;AAGPC,MAAAA,QAAQ,EAAE,IAHH;AAIPC,MAAAA,QAAQ,EAAE,IAJH;AAKPC,MAAAA,UAAU,EAAE,CALL;AAMPC,MAAAA,aAAa,EAAE,EANR;AAOPC,MAAAA,YAAY,EAAE,IAPP;AAQPC,MAAAA,OAAO,EAAE,IARF;AASPC,MAAAA,KAAK,EAAE;AATA,KADkB;;AAAA,SAa1BC,iBAb0B,GAaN,YAAY;AAC9B,UAAI;AACF;AACA,cAAMR,IAAI,GAAG,MAAMJ,OAAO,EAA1B,CAFE,CAIF;;AACA,cAAMK,QAAQ,GAAG,MAAMD,IAAI,CAACS,GAAL,CAASC,WAAT,EAAvB,CALE,CAOF;;AACA,cAAMC,SAAS,GAAG,MAAMX,IAAI,CAACS,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,cAAMC,eAAe,GAAGnB,eAAe,CAACoB,QAAhB,CAAyBJ,SAAzB,CAAxB;AACA,cAAMK,QAAQ,GAAG,IAAIhB,IAAI,CAACS,GAAL,CAASQ,QAAb,CACftB,eAAe,CAACuB,GADD,EAEfJ,eAAe,IAAIA,eAAe,CAACK,OAFpB,CAAjB;AAKA,cAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiBC,UAAjB,GAA8BC,IAA9B,EAAvB;AACA,cAAMC,WAAW,GAAG,MAAMR,QAAQ,CAACK,OAAT,CAAiBI,aAAjB,GAAiCF,IAAjC,EAA1B;AACA,cAAMG,GAAG,GAAG,MAAMV,QAAQ,CAACK,OAAT,CAAiBM,YAAjB,CAA8B1B,QAAQ,CAAC,CAAD,CAAtC,EAA2CsB,IAA3C,EAAlB,CAjBE,CAmBF;AACA;;AACA,aAAKK,QAAL,CAAc;AAACzB,UAAAA,UAAU,EAAEiB,QAAb;AAAuBhB,UAAAA,aAAa,EAAEoB,WAAtC;AAAmDlB,UAAAA,OAAO,EAAEoB;AAA5D,SAAd;AACA,aAAKE,QAAL,CAAc;AAAE5B,UAAAA,IAAF;AAAQC,UAAAA,QAAR;AAAkBC,UAAAA,QAAQ,EAAEc;AAA5B,SAAd;AACD,OAvBD,CAuBE,OAAOa,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,0EAAL;AAGAC,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF,KA5CyB;;AAAA,SA8C1BG,MA9C0B,GA8CjB,YAAY;AAAA,0BACkB,KAAKlC,KADvB;AAAA,YACXG,QADW,eACXA,QADW;AAAA,YACDC,QADC,eACDA,QADC;AAAA,YACSF,IADT,eACSA,IADT;AAGnB,YAAMiC,GAAG,GAAG,MAAMjC,IAAI,CAACkC,KAAL,CAAWC,KAAX,CAAiB,KAAKrC,KAAL,CAAWS,KAA5B,EAAmC,OAAnC,CAAlB;AAGA,YAAML,QAAQ,CAACmB,OAAT,CAAiBtB,GAAjB,GAAuBqC,IAAvB,CAA4B;AAAEC,QAAAA,IAAI,EAAEpC,QAAQ,CAAC,CAAD,CAAhB;AAAqBqC,QAAAA,KAAK,EAAEL;AAA5B,OAA5B,CAAN,CANmB,CAQnB;AACA;AAEA;;AACA,WAAKL,QAAL,CAAc;AAAEzB,QAAAA,UAAU,EAAE8B,GAAd;AAAmB7B,QAAAA,aAAa,EAAEH,QAAQ,CAAC,CAAD,CAA1C;AAA+CK,QAAAA,OAAO,EAAE2B;AAAxD,OAAd;AACD,KA3DyB;;AAAA,SA6D1BM,WA7D0B,GA6DZ,YAAY;AAAA,2BACM,KAAKzC,KADX;AAAA,YACjBG,QADiB,gBACjBA,QADiB;AAAA,YACPC,QADO,gBACPA,QADO;AAGzB,YAAMA,QAAQ,CAACmB,OAAT,CAAiBmB,QAAjB,GAA4BJ,IAA5B,CAAiC;AAAEC,QAAAA,IAAI,EAAEpC,QAAQ,CAAC,CAAD;AAAhB,OAAjC,CAAN,CAHyB,CAKzB;AACC;;AACA,WAAK2B,QAAL,CAAc;AAAEtB,QAAAA,OAAO,EAAE;AAAX,OAAd,EAPwB,CAQxB;AACD,KAtEyB;;AAAA,SAwE1BmC,QAxE0B,GAwEdC,KAAD,IAAW;AACpB,WAAKd,QAAL,CAAc;AAACrB,QAAAA,KAAK,EAAEmC,KAAK,CAACC,MAAN,CAAaL;AAArB,OAAd,EAA2C,MAAM;AAC/CP,QAAAA,OAAO,CAACa,GAAR,CAAY,KAAK9C,KAAL,CAAWS,KAAvB;AACD,OAFD;AAGD,KA5EyB;AAAA;;AA8E1BsC,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAK/C,KAAL,CAAWE,IAAhB,EAAsB;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAP;AACD;;AACD,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAJ,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAHF,EAKL;AAAO,MAAA,GAAG,EAAC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALK,EAML;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,WAAtB;AAAiC,MAAA,GAAG,MAApC;AAAqC,MAAA,QAAQ,EAAG,KAAK8C,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANK,cAQL;AAAQ,MAAA,OAAO,EAAI,KAAKd,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aARK,EAUL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAkB,KAAKlC,KAAL,CAAWQ,OAA7B,UAVK,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,EAcJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAyB,KAAKR,KAAL,CAAWK,UAApC,UADP,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAA4B,KAAKL,KAAL,CAAWM,aAAvC,MAFD,CAdI,EAmBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBI,EAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAAqD;AAAQ,MAAA,OAAO,EAAI,KAAK2C,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAArD,CArBF,CADF;AA0BD;;AA5GyB;;AA+G5B,eAAelD,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { \n  \tbid: 0, \n  \tweb3: null, \n  \taccounts: null, \n  \tcontract: null,\n  \thighestbid: 0,\n  \thighestbidder: \"\",\n  \tcan_withdraw: null,\n  \tbalance: null,\n  \tinput: \"\" \n  \t};\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = AuctionContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        AuctionContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n      const high_bid = await instance.methods.highestBid().call();\n      const high_bidder = await instance.methods.highestBidder().call();\n      const bal = await instance.methods.userBalances(accounts[0]).call();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({highestbid: high_bid, highestbidder: high_bidder, balance: bal })\n      this.setState({ web3, accounts, contract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runBid = async () => {\n    const { accounts, contract, web3 } = this.state;\n\n    const val = await web3.utils.toWei(this.state.input, 'ether');\n    \n    \n    await contract.methods.bid().send({ from: accounts[0], value: val });\n\n    //const response_bid = await contract.methods.highestBid().call();\n    //const response_bidder = await contract.methods.highestBidder().call;\n\n    // Update state with the result.\n    this.setState({ highestbid: val, highestbidder: accounts[0], balance: val });\n  };\n  \n  runWithdraw = async () => {\n  \tconst { accounts, contract } = this.state;\n  \t\n  \tawait contract.methods.withdraw().send({ from: accounts[0] });\n  \t\n  \t//const response_bid = await contract.methods.highestBid().call();\n    //const response_bidder = await contract.methods.highestBidder().call;\n    this.setState({ balance: 0 });\n    //this.setState({ highestbid: response_bid, highestbidder: response_bidder });\n  }\n  \n  getValue = (event) => {\n    this.setState({input: event.target.value}, () => {\n      console.log(this.state.input)\n    });\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n      \n        <h1><u>Auction</u></h1>\n        <h2>Lets begin the Auction!</h2>\n\t\n\t<label for=\"bid\">Enter bid: </label>\n\t<input type=\"text\" id=\"bid name=\"bid onChange ={this.getV} />&nbsp;&nbsp;\n\n\t<button onClick = {this.runBid}>Bid</button>\n\t\n\t<p> Your bid is: {this.state.balance} wei </p>\n        \n        <hr></hr>\n\n\t\t<div>\n\t        <p> The highest bid is: {this.state.highestbid} wei </p>\n\t\t\t<p> The highest bidder is: {this.state.highestbidder} </p>\n\t\t</div>\n\t\t\n\t\t<hr></hr>\n\t\t\n        <div>The one with the lowest bid can withdraw: &nbsp;<button onClick = {this.runwithdraw}>Withdraw</button></div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}